
SeisoMachine2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  000002d4  00000368  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002d4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  0080010a  0080010a  00000372  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000372  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  000003e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000808  00000000  00000000  00000424  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000070f  00000000  00000000  00000c2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000450  00000000  00000000  0000133b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000ac  00000000  00000000  0000178c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003e3  00000000  00000000  00001838  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001a8  00000000  00000000  00001c1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001dc3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 54 01 	jmp	0x2a8	; 0x2a8 <__vector_1>
   8:	0c 94 5e 01 	jmp	0x2bc	; 0x2bc <__vector_2>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__vector_7>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 ed       	ldi	r30, 0xD4	; 212
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e0       	ldi	r26, 0x0A	; 10
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ac 30       	cpi	r26, 0x0C	; 12
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 9a 00 	call	0x134	; 0x134 <main>
  9e:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <Set7Seg>:
		Set7Seg(i,1);
    }
}

void Set7Seg(unsigned char num,unsigned char dot)
{
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  aa:	cd b7       	in	r28, 0x3d	; 61
  ac:	de b7       	in	r29, 0x3e	; 62
  ae:	2a 97       	sbiw	r28, 0x0a	; 10
  b0:	0f b6       	in	r0, 0x3f	; 63
  b2:	f8 94       	cli
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	0f be       	out	0x3f, r0	; 63
  b8:	cd bf       	out	0x3d, r28	; 61
	const char seg[10]=  //0bGFEDCBAP
  ba:	9a e0       	ldi	r25, 0x0A	; 10
  bc:	e0 e0       	ldi	r30, 0x00	; 0
  be:	f1 e0       	ldi	r31, 0x01	; 1
  c0:	de 01       	movw	r26, r28
  c2:	11 96       	adiw	r26, 0x01	; 1
  c4:	01 90       	ld	r0, Z+
  c6:	0d 92       	st	X+, r0
  c8:	9a 95       	dec	r25
  ca:	e1 f7       	brne	.-8      	; 0xc4 <Set7Seg+0x1e>
		0b10110001,//7
		0b00000001,//8
		0b00100001,//9
	};
	
	PORTC=(PORTC & 0b11000001) | (seg[num] & 0b00111110);
  cc:	98 b1       	in	r25, 0x08	; 8
  ce:	e1 e0       	ldi	r30, 0x01	; 1
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	ec 0f       	add	r30, r28
  d4:	fd 1f       	adc	r31, r29
  d6:	e8 0f       	add	r30, r24
  d8:	f1 1d       	adc	r31, r1
  da:	80 81       	ld	r24, Z
  dc:	8e 73       	andi	r24, 0x3E	; 62
  de:	91 7c       	andi	r25, 0xC1	; 193
  e0:	98 2b       	or	r25, r24
  e2:	98 b9       	out	0x08, r25	; 8
	PORTB=(PORTB & 0b11110010) | ((seg[num]& 0x80)>>7) | ((seg[num] & 0x40)>>4) | ((dot & 0x01)<<3); 
  e4:	85 b1       	in	r24, 0x05	; 5
  e6:	90 81       	ld	r25, Z
  e8:	26 2f       	mov	r18, r22
  ea:	21 70       	andi	r18, 0x01	; 1
  ec:	30 e0       	ldi	r19, 0x00	; 0
  ee:	22 0f       	add	r18, r18
  f0:	33 1f       	adc	r19, r19
  f2:	22 0f       	add	r18, r18
  f4:	33 1f       	adc	r19, r19
  f6:	22 0f       	add	r18, r18
  f8:	33 1f       	adc	r19, r19
  fa:	82 7f       	andi	r24, 0xF2	; 242
  fc:	28 2b       	or	r18, r24
  fe:	89 2f       	mov	r24, r25
 100:	88 1f       	adc	r24, r24
 102:	88 27       	eor	r24, r24
 104:	88 1f       	adc	r24, r24
 106:	28 2b       	or	r18, r24
 108:	90 74       	andi	r25, 0x40	; 64
 10a:	89 2f       	mov	r24, r25
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	95 95       	asr	r25
 110:	87 95       	ror	r24
 112:	95 95       	asr	r25
 114:	87 95       	ror	r24
 116:	95 95       	asr	r25
 118:	87 95       	ror	r24
 11a:	95 95       	asr	r25
 11c:	87 95       	ror	r24
 11e:	82 2b       	or	r24, r18
 120:	85 b9       	out	0x05, r24	; 5
}
 122:	2a 96       	adiw	r28, 0x0a	; 10
 124:	0f b6       	in	r0, 0x3f	; 63
 126:	f8 94       	cli
 128:	de bf       	out	0x3e, r29	; 62
 12a:	0f be       	out	0x3f, r0	; 63
 12c:	cd bf       	out	0x3d, r28	; 61
 12e:	df 91       	pop	r29
 130:	cf 91       	pop	r28
 132:	08 95       	ret

00000134 <main>:

int main(void)
{

	//ポートB　2 3 GP F 青 G
	DDRB= 
 134:	8f ec       	ldi	r24, 0xCF	; 207
 136:	84 b9       	out	0x04, r24	; 4
	| (1<<DDB3) //PB3 MOSI 7seg_GP
	| (1<<DDB2) //PB2 7seg_F
	| (1<<DDB1) //PB1 blue
	| (1<<DDB0);//PB0 7seg_G
	//ポートC　E D C B A スイッチ
	DDRC=
 138:	8e e3       	ldi	r24, 0x3E	; 62
 13a:	87 b9       	out	0x07, r24	; 7
	| (1<<DDC3) //PC3 7seg_C
	| (1<<DDC2) //PC2 7seg_B
	| (1<<DDC1) //PC1 7seg_A
	| (0<<DDC0);//PC0 switch
	//ポートD　1 緑 赤 4 INT INT TX RX
	DDRD=
 13c:	80 ef       	ldi	r24, 0xF0	; 240
 13e:	8a b9       	out	0x0a, r24	; 10
	| (0<<DDD3) //PD3 INT1 rotary encoder
	| (0<<DDD2) //PD2 INT2 rotary encoder
	| (0<<DDD1) //PD1 UART TX
	| (0<<DDD0);//PD0 UART RX
	
	PORTD|=0b10000000;
 140:	5f 9a       	sbi	0x0b, 7	; 11
	
	//8bitタイマーカウンタ０//PWM
	TCCR0A= (0b11<<COM1A0)	//高速PWM比較A反転出力
 142:	83 ef       	ldi	r24, 0xF3	; 243
 144:	84 bd       	out	0x24, r24	; 36
	| (0b11<<COM0B0)		//高速PWM比較B反転出力
	| (0b11<<WGM00);  		//高速PWM
	TCCR0B= (0<<WGM02) //高速PWM
 146:	84 e0       	ldi	r24, 0x04	; 4
 148:	85 bd       	out	0x25, r24	; 37
	| (0b100<<CS00); //256分周　312.5Hz

	//16bitタイマーカウンタ1
	TCCR1A= (0b11<<COM0A0)	//高速PWM比較A反転出力
 14a:	91 ec       	ldi	r25, 0xC1	; 193
 14c:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
	| (0b00<<COM0B0)		//標準ポート動作
	| (0b01<<WGM00);  		//8bit高速PWM	
	TCCR1B= (0b00<<WGM12)   //8bit高速PWM
 150:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
	| (0b100<<CS10);		//256分周　312.5Hz

	//8bitタイマーカウンタ2
	TCCR2A= (0b0000<<COM2B0)//標準ポート動作
 154:	92 e0       	ldi	r25, 0x02	; 2
 156:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
	| (0b10<<WGM20);		//比較一致ﾀｲﾏ
	TCCR2B= (0b1<<WGM22)	//比較一致ﾀｲﾏ
 15a:	8f e0       	ldi	r24, 0x0F	; 15
 15c:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
	| (0b111<<CS20);		//1024分周　78.125Hz
	OCR2A=40;				//ダイナミック点灯周期
 160:	88 e2       	ldi	r24, 0x28	; 40
 162:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
	OCR2B=0xFF;				//ロータリーエンコーダーゲーミング周期
 166:	8f ef       	ldi	r24, 0xFF	; 255
 168:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>
	TIMSK2=1<<OCIE2A;		//タイマー2A割込み許可
 16c:	90 93 70 00 	sts	0x0070, r25	; 0x800070 <__DATA_REGION_ORIGIN__+0x10>
	//PORTB|=0b00000000;
	
	//外部割込み
	EICRA= 0b01<<ISC10		//INT1 両端割込み
 170:	95 e0       	ldi	r25, 0x05	; 5
 172:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
	| 0b01<<ISC00;			//INT0 両端割込み
	EIMSK=1<<INT0			//INT0 割込み許可
 176:	93 e0       	ldi	r25, 0x03	; 3
 178:	9d bb       	out	0x1d, r25	; 29
	| 0b01<<INT1;				//INT1 割込み許可
			
		
	//ゲーミングロータリーエンコーダ初期設定
	OCR0A=0;
 17a:	17 bc       	out	0x27, r1	; 39
	OCR0B=255;
 17c:	88 bd       	out	0x28, r24	; 40
	OCR1A=0;
 17e:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 182:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
	

	unsigned char i=0;
	sei();
 186:	78 94       	sei
	OCR0A=0;
	OCR0B=255;
	OCR1A=0;
	

	unsigned char i=0;
 188:	c0 e0       	ldi	r28, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 18a:	2f ef       	ldi	r18, 0xFF	; 255
 18c:	89 e6       	ldi	r24, 0x69	; 105
 18e:	98 e1       	ldi	r25, 0x18	; 24
 190:	21 50       	subi	r18, 0x01	; 1
 192:	80 40       	sbci	r24, 0x00	; 0
 194:	90 40       	sbci	r25, 0x00	; 0
 196:	e1 f7       	brne	.-8      	; 0x190 <main+0x5c>
 198:	00 c0       	rjmp	.+0      	; 0x19a <main+0x66>
 19a:	00 00       	nop
	sei();
    while (1) 
    {
		_delay_ms(1000);
		roopup(i,0,9);
 19c:	c9 30       	cpi	r28, 0x09	; 9
 19e:	10 f4       	brcc	.+4      	; 0x1a4 <main+0x70>
 1a0:	cf 5f       	subi	r28, 0xFF	; 255
 1a2:	01 c0       	rjmp	.+2      	; 0x1a6 <main+0x72>
 1a4:	c0 e0       	ldi	r28, 0x00	; 0
		Set7Seg(i,1);
 1a6:	61 e0       	ldi	r22, 0x01	; 1
 1a8:	8c 2f       	mov	r24, r28
 1aa:	0e 94 53 00 	call	0xa6	; 0xa6 <Set7Seg>
    }
 1ae:	ed cf       	rjmp	.-38     	; 0x18a <main+0x56>

000001b0 <__vector_7>:
}



ISR(TIMER2_COMPA_vect)
{
 1b0:	1f 92       	push	r1
 1b2:	0f 92       	push	r0
 1b4:	0f b6       	in	r0, 0x3f	; 63
 1b6:	0f 92       	push	r0
 1b8:	11 24       	eor	r1, r1
 1ba:	8f 93       	push	r24
 1bc:	9f 93       	push	r25
 1be:	ef 93       	push	r30
 1c0:	ff 93       	push	r31
	static unsigned char digit=0;
	//全部クリア
	cbi(PORTD,PD7);
 1c2:	5f 98       	cbi	0x0b, 7	; 11
	cbi(PORTB,PB7);
 1c4:	2f 98       	cbi	0x05, 7	; 5
	cbi(PORTB,PB6);
 1c6:	2e 98       	cbi	0x05, 6	; 5
	cbi(PORTD,PD4);
 1c8:	5c 98       	cbi	0x0b, 4	; 11
	//特定桁の表示
	switch (digit)
 1ca:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <digit.1746>
 1ce:	81 30       	cpi	r24, 0x01	; 1
 1d0:	41 f0       	breq	.+16     	; 0x1e2 <__vector_7+0x32>
 1d2:	28 f0       	brcs	.+10     	; 0x1de <__vector_7+0x2e>
 1d4:	82 30       	cpi	r24, 0x02	; 2
 1d6:	39 f0       	breq	.+14     	; 0x1e6 <__vector_7+0x36>
 1d8:	83 30       	cpi	r24, 0x03	; 3
 1da:	39 f0       	breq	.+14     	; 0x1ea <__vector_7+0x3a>
 1dc:	07 c0       	rjmp	.+14     	; 0x1ec <__vector_7+0x3c>
	{
		case 0:
		sbi(PORTD,PD7);
 1de:	5f 9a       	sbi	0x0b, 7	; 11
		break;
 1e0:	05 c0       	rjmp	.+10     	; 0x1ec <__vector_7+0x3c>
		case 1:
		sbi(PORTB,PB7);
 1e2:	2f 9a       	sbi	0x05, 7	; 5
		break;
 1e4:	03 c0       	rjmp	.+6      	; 0x1ec <__vector_7+0x3c>
		case 2:
		sbi(PORTB,PB6);
 1e6:	2e 9a       	sbi	0x05, 6	; 5
		break;
 1e8:	01 c0       	rjmp	.+2      	; 0x1ec <__vector_7+0x3c>
		case 3:
		sbi(PORTD,PD4);
 1ea:	5c 9a       	sbi	0x0b, 4	; 11
		break;
		default:
		/* Your code here */
		break;
	}
	roopup(digit,0,3);
 1ec:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <digit.1746>
 1f0:	83 30       	cpi	r24, 0x03	; 3
 1f2:	10 f4       	brcc	.+4      	; 0x1f8 <__vector_7+0x48>
 1f4:	8f 5f       	subi	r24, 0xFF	; 255
 1f6:	01 c0       	rjmp	.+2      	; 0x1fa <__vector_7+0x4a>
 1f8:	80 e0       	ldi	r24, 0x00	; 0
 1fa:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <digit.1746>
	
	//ゲーミングロータリーエンコーダ
	static unsigned char stage=0;
	if (stage==0)
 1fe:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 202:	81 11       	cpse	r24, r1
 204:	19 c0       	rjmp	.+50     	; 0x238 <__vector_7+0x88>
	{
		OCR0B--;
 206:	88 b5       	in	r24, 0x28	; 40
 208:	81 50       	subi	r24, 0x01	; 1
 20a:	88 bd       	out	0x28, r24	; 40
		OCR1A++;
 20c:	e8 e8       	ldi	r30, 0x88	; 136
 20e:	f0 e0       	ldi	r31, 0x00	; 0
 210:	80 81       	ld	r24, Z
 212:	91 81       	ldd	r25, Z+1	; 0x01
 214:	01 96       	adiw	r24, 0x01	; 1
 216:	91 83       	std	Z+1, r25	; 0x01
 218:	80 83       	st	Z, r24
		if (OCR0B==0) 
 21a:	88 b5       	in	r24, 0x28	; 40
 21c:	81 11       	cpse	r24, r1
 21e:	3b c0       	rjmp	.+118    	; 0x296 <__vector_7+0xe6>
		{
			OCR0A=0;
 220:	17 bc       	out	0x27, r1	; 39
			OCR0B=0;
 222:	18 bc       	out	0x28, r1	; 40
			OCR1A=255;			
 224:	8f ef       	ldi	r24, 0xFF	; 255
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 22c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
			stage=1;			
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
 236:	2f c0       	rjmp	.+94     	; 0x296 <__vector_7+0xe6>
		}
	}
	else if (stage==1)
 238:	81 30       	cpi	r24, 0x01	; 1
 23a:	c9 f4       	brne	.+50     	; 0x26e <__vector_7+0xbe>
	{
		OCR1A--;
 23c:	e8 e8       	ldi	r30, 0x88	; 136
 23e:	f0 e0       	ldi	r31, 0x00	; 0
 240:	80 81       	ld	r24, Z
 242:	91 81       	ldd	r25, Z+1	; 0x01
 244:	01 97       	sbiw	r24, 0x01	; 1
 246:	91 83       	std	Z+1, r25	; 0x01
 248:	80 83       	st	Z, r24
		OCR0A++;
 24a:	87 b5       	in	r24, 0x27	; 39
 24c:	8f 5f       	subi	r24, 0xFF	; 255
 24e:	87 bd       	out	0x27, r24	; 39
		if (OCR1A==0) 
 250:	80 81       	ld	r24, Z
 252:	91 81       	ldd	r25, Z+1	; 0x01
 254:	89 2b       	or	r24, r25
 256:	f9 f4       	brne	.+62     	; 0x296 <__vector_7+0xe6>
		{
			OCR0A=255;
 258:	8f ef       	ldi	r24, 0xFF	; 255
 25a:	87 bd       	out	0x27, r24	; 39
			OCR0B=0;
 25c:	18 bc       	out	0x28, r1	; 40
			OCR1A=0;
 25e:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 262:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
			stage=2;
 266:	82 e0       	ldi	r24, 0x02	; 2
 268:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
 26c:	14 c0       	rjmp	.+40     	; 0x296 <__vector_7+0xe6>
		}
	}
	else if (stage==2)
 26e:	82 30       	cpi	r24, 0x02	; 2
 270:	91 f4       	brne	.+36     	; 0x296 <__vector_7+0xe6>
	{
		OCR0A--;
 272:	87 b5       	in	r24, 0x27	; 39
 274:	81 50       	subi	r24, 0x01	; 1
 276:	87 bd       	out	0x27, r24	; 39
		OCR0B++;
 278:	88 b5       	in	r24, 0x28	; 40
 27a:	8f 5f       	subi	r24, 0xFF	; 255
 27c:	88 bd       	out	0x28, r24	; 40
		if (OCR0A==0) 
 27e:	87 b5       	in	r24, 0x27	; 39
 280:	81 11       	cpse	r24, r1
 282:	09 c0       	rjmp	.+18     	; 0x296 <__vector_7+0xe6>
		{
			OCR0A=0;
 284:	17 bc       	out	0x27, r1	; 39
			OCR0B=255;
 286:	8f ef       	ldi	r24, 0xFF	; 255
 288:	88 bd       	out	0x28, r24	; 40
			OCR1A=0;
 28a:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 28e:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
			stage=0;
 292:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <__data_end>
		}
	}
}
 296:	ff 91       	pop	r31
 298:	ef 91       	pop	r30
 29a:	9f 91       	pop	r25
 29c:	8f 91       	pop	r24
 29e:	0f 90       	pop	r0
 2a0:	0f be       	out	0x3f, r0	; 63
 2a2:	0f 90       	pop	r0
 2a4:	1f 90       	pop	r1
 2a6:	18 95       	reti

000002a8 <__vector_1>:

ISR(INT0_vect)
{
 2a8:	1f 92       	push	r1
 2aa:	0f 92       	push	r0
 2ac:	0f b6       	in	r0, 0x3f	; 63
 2ae:	0f 92       	push	r0
 2b0:	11 24       	eor	r1, r1
	
}
 2b2:	0f 90       	pop	r0
 2b4:	0f be       	out	0x3f, r0	; 63
 2b6:	0f 90       	pop	r0
 2b8:	1f 90       	pop	r1
 2ba:	18 95       	reti

000002bc <__vector_2>:

ISR(INT1_vect)
{
 2bc:	1f 92       	push	r1
 2be:	0f 92       	push	r0
 2c0:	0f b6       	in	r0, 0x3f	; 63
 2c2:	0f 92       	push	r0
 2c4:	11 24       	eor	r1, r1
	
 2c6:	0f 90       	pop	r0
 2c8:	0f be       	out	0x3f, r0	; 63
 2ca:	0f 90       	pop	r0
 2cc:	1f 90       	pop	r1
 2ce:	18 95       	reti

000002d0 <_exit>:
 2d0:	f8 94       	cli

000002d2 <__stop_program>:
 2d2:	ff cf       	rjmp	.-2      	; 0x2d2 <__stop_program>
