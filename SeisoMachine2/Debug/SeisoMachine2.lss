
SeisoMachine2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  000004d2  00000566  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004d2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  0080010c  0080010c  00000572  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000572  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  000005e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000847  00000000  00000000  0000061c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006e3  00000000  00000000  00000e63  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000054f  00000000  00000000  00001546  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000ac  00000000  00000000  00001a98  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003b7  00000000  00000000  00001b44  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001d1  00000000  00000000  00001efb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  000020cc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 a0 01 	jmp	0x340	; 0x340 <__vector_7>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 ed       	ldi	r30, 0xD2	; 210
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 30       	cpi	r26, 0x0C	; 12
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e0       	ldi	r26, 0x0C	; 12
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 31       	cpi	r26, 0x12	; 18
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 de 00 	call	0x1bc	; 0x1bc <main>
  9e:	0c 94 67 02 	jmp	0x4ce	; 0x4ce <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <Set7Seg>:
		}
    }
}

void Set7Seg(unsigned char num,unsigned char dot)
{
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  aa:	cd b7       	in	r28, 0x3d	; 61
  ac:	de b7       	in	r29, 0x3e	; 62
  ae:	2a 97       	sbiw	r28, 0x0a	; 10
  b0:	0f b6       	in	r0, 0x3f	; 63
  b2:	f8 94       	cli
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	0f be       	out	0x3f, r0	; 63
  b8:	cd bf       	out	0x3d, r28	; 61
	const char seg[10]=  //0bGFEDCBAP
  ba:	9a e0       	ldi	r25, 0x0A	; 10
  bc:	e2 e0       	ldi	r30, 0x02	; 2
  be:	f1 e0       	ldi	r31, 0x01	; 1
  c0:	de 01       	movw	r26, r28
  c2:	11 96       	adiw	r26, 0x01	; 1
  c4:	01 90       	ld	r0, Z+
  c6:	0d 92       	st	X+, r0
  c8:	9a 95       	dec	r25
  ca:	e1 f7       	brne	.-8      	; 0xc4 <Set7Seg+0x1e>
		0b10110001,//7
		0b00000001,//8
		0b00100001,//9
	};
	
	PORTC=(PORTC & 0b11000001) | (seg[num] & 0b00111110);
  cc:	98 b1       	in	r25, 0x08	; 8
  ce:	e1 e0       	ldi	r30, 0x01	; 1
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	ec 0f       	add	r30, r28
  d4:	fd 1f       	adc	r31, r29
  d6:	e8 0f       	add	r30, r24
  d8:	f1 1d       	adc	r31, r1
  da:	80 81       	ld	r24, Z
  dc:	8e 73       	andi	r24, 0x3E	; 62
  de:	91 7c       	andi	r25, 0xC1	; 193
  e0:	98 2b       	or	r25, r24
  e2:	98 b9       	out	0x08, r25	; 8
	PORTB=(PORTB & 0b11110010) | ((seg[num]& 0x80)>>7) | ((seg[num] & 0x40)>>4) | ((~dot & 0x01)<<3); 
  e4:	85 b1       	in	r24, 0x05	; 5
  e6:	90 81       	ld	r25, Z
  e8:	82 7f       	andi	r24, 0xF2	; 242
  ea:	39 2f       	mov	r19, r25
  ec:	33 1f       	adc	r19, r19
  ee:	33 27       	eor	r19, r19
  f0:	33 1f       	adc	r19, r19
  f2:	28 2f       	mov	r18, r24
  f4:	23 2b       	or	r18, r19
  f6:	90 74       	andi	r25, 0x40	; 64
  f8:	89 2f       	mov	r24, r25
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	95 95       	asr	r25
  fe:	87 95       	ror	r24
 100:	95 95       	asr	r25
 102:	87 95       	ror	r24
 104:	95 95       	asr	r25
 106:	87 95       	ror	r24
 108:	95 95       	asr	r25
 10a:	87 95       	ror	r24
 10c:	82 2b       	or	r24, r18
 10e:	60 ff       	sbrs	r22, 0
 110:	02 c0       	rjmp	.+4      	; 0x116 <Set7Seg+0x70>
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	01 c0       	rjmp	.+2      	; 0x118 <Set7Seg+0x72>
 116:	98 e0       	ldi	r25, 0x08	; 8
 118:	89 2b       	or	r24, r25
 11a:	85 b9       	out	0x05, r24	; 5
}
 11c:	2a 96       	adiw	r28, 0x0a	; 10
 11e:	0f b6       	in	r0, 0x3f	; 63
 120:	f8 94       	cli
 122:	de bf       	out	0x3e, r29	; 62
 124:	0f be       	out	0x3f, r0	; 63
 126:	cd bf       	out	0x3d, r28	; 61
 128:	df 91       	pop	r29
 12a:	cf 91       	pop	r28
 12c:	08 95       	ret

0000012e <SetTrackNumber>:

void SetTrackNumber(uint16_t num)
{
 12e:	ac 01       	movw	r20, r24
	trackNum=num;
 130:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 134:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	trackDigit[0]=num/1000;
 138:	9c 01       	movw	r18, r24
 13a:	36 95       	lsr	r19
 13c:	27 95       	ror	r18
 13e:	36 95       	lsr	r19
 140:	27 95       	ror	r18
 142:	36 95       	lsr	r19
 144:	27 95       	ror	r18
 146:	a5 ec       	ldi	r26, 0xC5	; 197
 148:	b0 e2       	ldi	r27, 0x20	; 32
 14a:	0e 94 58 02 	call	0x4b0	; 0x4b0 <__umulhisi3>
 14e:	92 95       	swap	r25
 150:	82 95       	swap	r24
 152:	8f 70       	andi	r24, 0x0F	; 15
 154:	89 27       	eor	r24, r25
 156:	9f 70       	andi	r25, 0x0F	; 15
 158:	89 27       	eor	r24, r25
 15a:	ee e0       	ldi	r30, 0x0E	; 14
 15c:	f1 e0       	ldi	r31, 0x01	; 1
 15e:	80 83       	st	Z, r24
	num-=1000*trackDigit[0];
 160:	68 e1       	ldi	r22, 0x18	; 24
 162:	7c ef       	ldi	r23, 0xFC	; 252
 164:	86 9f       	mul	r24, r22
 166:	90 01       	movw	r18, r0
 168:	87 9f       	mul	r24, r23
 16a:	30 0d       	add	r19, r0
 16c:	11 24       	eor	r1, r1
 16e:	42 0f       	add	r20, r18
 170:	53 1f       	adc	r21, r19
	trackDigit[1]=num/100;
 172:	9a 01       	movw	r18, r20
 174:	36 95       	lsr	r19
 176:	27 95       	ror	r18
 178:	36 95       	lsr	r19
 17a:	27 95       	ror	r18
 17c:	ab e7       	ldi	r26, 0x7B	; 123
 17e:	b4 e1       	ldi	r27, 0x14	; 20
 180:	0e 94 58 02 	call	0x4b0	; 0x4b0 <__umulhisi3>
 184:	96 95       	lsr	r25
 186:	87 95       	ror	r24
 188:	81 83       	std	Z+1, r24	; 0x01
	num-=100*trackDigit[1];
 18a:	24 e6       	ldi	r18, 0x64	; 100
 18c:	82 9f       	mul	r24, r18
 18e:	40 19       	sub	r20, r0
 190:	51 09       	sbc	r21, r1
 192:	11 24       	eor	r1, r1
	trackDigit[2]=num/10;
 194:	9a 01       	movw	r18, r20
 196:	ad ec       	ldi	r26, 0xCD	; 205
 198:	bc ec       	ldi	r27, 0xCC	; 204
 19a:	0e 94 58 02 	call	0x4b0	; 0x4b0 <__umulhisi3>
 19e:	96 95       	lsr	r25
 1a0:	87 95       	ror	r24
 1a2:	96 95       	lsr	r25
 1a4:	87 95       	ror	r24
 1a6:	96 95       	lsr	r25
 1a8:	87 95       	ror	r24
 1aa:	82 83       	std	Z+2, r24	; 0x02
	trackDigit[3]=num-10*trackDigit[2];
 1ac:	88 0f       	add	r24, r24
 1ae:	98 2f       	mov	r25, r24
 1b0:	99 0f       	add	r25, r25
 1b2:	99 0f       	add	r25, r25
 1b4:	89 0f       	add	r24, r25
 1b6:	48 1b       	sub	r20, r24
 1b8:	43 83       	std	Z+3, r20	; 0x03
 1ba:	08 95       	ret

000001bc <main>:

int main(void)
{

	//ポートB　2 3 GP F 青 G
	DDRB= 
 1bc:	8f ec       	ldi	r24, 0xCF	; 207
 1be:	84 b9       	out	0x04, r24	; 4
	| (1<<DDB3) //PB3 MOSI 7seg_GP
	| (1<<DDB2) //PB2 7seg_F
	| (1<<DDB1) //PB1 blue
	| (1<<DDB0);//PB0 7seg_G
	//ポートC　E D C B A スイッチ
	DDRC=
 1c0:	8e e3       	ldi	r24, 0x3E	; 62
 1c2:	87 b9       	out	0x07, r24	; 7
	| (1<<DDC3) //PC3 7seg_C
	| (1<<DDC2) //PC2 7seg_B
	| (1<<DDC1) //PC1 7seg_A
	| (0<<DDC0);//PC0 switch
	//ポートD　1 緑 赤 4 INT INT TX RX
	DDRD=
 1c4:	80 ef       	ldi	r24, 0xF0	; 240
 1c6:	8a b9       	out	0x0a, r24	; 10
	| (0<<DDD3) //PD3 INT1 rotary encoder
	| (0<<DDD2) //PD2 INT2 rotary encoder
	| (0<<DDD1) //PD1 UART TX
	| (0<<DDD0);//PD0 UART RX
	
	PORTD|=0b10001100;
 1c8:	8b b1       	in	r24, 0x0b	; 11
 1ca:	8c 68       	ori	r24, 0x8C	; 140
 1cc:	8b b9       	out	0x0b, r24	; 11
	
	//8bitタイマーカウンタ０//PWM
	TCCR0A= (0b11<<COM1A0)	//高速PWM比較A反転出力
 1ce:	83 ef       	ldi	r24, 0xF3	; 243
 1d0:	84 bd       	out	0x24, r24	; 36
	| (0b11<<COM0B0)		//高速PWM比較B反転出力
	| (0b11<<WGM00);  		//高速PWM
	TCCR0B= (0<<WGM02) //高速PWM
 1d2:	84 e0       	ldi	r24, 0x04	; 4
 1d4:	85 bd       	out	0x25, r24	; 37
	| (0b100<<CS00); //256分周　312.5Hz

	//16bitタイマーカウンタ1
	TCCR1A= (0b11<<COM0A0)	//高速PWM比較A反転出力
 1d6:	91 ec       	ldi	r25, 0xC1	; 193
 1d8:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
	| (0b00<<COM0B0)		//標準ポート動作
	| (0b01<<WGM00);  		//8bit高速PWM	
	TCCR1B= (0b00<<WGM12)   //8bit高速PWM
 1dc:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
	| (0b100<<CS10);		//256分周　312.5Hz

	//8bitタイマーカウンタ2
	TCCR2A= (0b0000<<COM2B0)//標準ポート動作
 1e0:	92 e0       	ldi	r25, 0x02	; 2
 1e2:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
	| (0b10<<WGM20);		//比較一致ﾀｲﾏ
	TCCR2B= (0b1<<WGM22)	//比較一致ﾀｲﾏ
 1e6:	8f e0       	ldi	r24, 0x0F	; 15
 1e8:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
	| (0b111<<CS20);		//1024分周　78.125Hz
	OCR2A=30;				//ダイナミック点灯周期
 1ec:	8e e1       	ldi	r24, 0x1E	; 30
 1ee:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
	OCR2B=0xFF;				//ロータリーエンコーダーゲーミング周期
 1f2:	8f ef       	ldi	r24, 0xFF	; 255
 1f4:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>
	TIMSK2=1<<OCIE2A;		//タイマー2A割込み許可
 1f8:	90 93 70 00 	sts	0x0070, r25	; 0x800070 <__DATA_REGION_ORIGIN__+0x10>
	//PORTB|=0b00000000;
	
	//外部割込み
	EICRA= 0b10<<ISC10		//INT1 下降端割込み
 1fc:	9a e0       	ldi	r25, 0x0A	; 10
 1fe:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
	| 0b10<<ISC00;			//INT0 下降端割込み
	EIMSK=0<<INT0			//INT0 割込み許可
 202:	1d ba       	out	0x1d, r1	; 29
	| 0<<INT1;				//INT1 割込み許可
			
		
	//ゲーミングロータリーエンコーダ初期設定
	OCR0A=0;
 204:	17 bc       	out	0x27, r1	; 39
	OCR0B=255;
 206:	88 bd       	out	0x28, r24	; 40
	OCR1A=0;
 208:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 20c:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
	
	SetTrackNumber(trackNum);
 210:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 214:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 218:	0e 94 97 00 	call	0x12e	; 0x12e <SetTrackNumber>
	unsigned char abStatus=0;
	sei();
 21c:	78 94       	sei
	OCR0A=0;
	OCR0B=255;
	OCR1A=0;
	
	SetTrackNumber(trackNum);
	unsigned char abStatus=0;
 21e:	90 e0       	ldi	r25, 0x00	; 0
    while (1) 
    {
		//countup
		if ((PIND & 0x0C) == 0x08 && abStatus==0)
		{
			abStatus=1;
 220:	c1 e0       	ldi	r28, 0x01	; 1
		{
			abStatus=2;
		}
		if (((PIND & 0x0C) == 0x04) && abStatus==2)
		{
			abStatus=3;
 222:	0f 2e       	mov	r0, r31
 224:	f3 e0       	ldi	r31, 0x03	; 3
 226:	df 2e       	mov	r13, r31
 228:	f0 2d       	mov	r31, r0
			abStatus=0;
		}
		//countdown
		if ((PIND & 0x0C) == 0x04 && abStatus==0)
		{
			abStatus=4;
 22a:	d4 e0       	ldi	r29, 0x04	; 4
			SetTrackNumber(++trackNum);
			if (trackNum>9999)
			{
				SetTrackNumber(1);
			}		
			abStatus=0;
 22c:	10 e0       	ldi	r17, 0x00	; 0
		{
			abStatus=1;
		}
		if (((PIND & 0x0C) == 0x00) && abStatus==1)
		{
			abStatus=2;
 22e:	68 94       	set
 230:	ff 24       	eor	r15, r15
 232:	f1 f8       	bld	r15, 1
		{
			abStatus=5;
		}
		if (((PIND & 0x0C) == 0x08) && abStatus==5)
		{
			abStatus=6;
 234:	0f 2e       	mov	r0, r31
 236:	f6 e0       	ldi	r31, 0x06	; 6
 238:	ef 2e       	mov	r14, r31
 23a:	f0 2d       	mov	r31, r0
		{
			abStatus=4;
		}
		if (((PIND & 0x0C) == 0x00) && abStatus==4)
		{
			abStatus=5;
 23c:	05 e0       	ldi	r16, 0x05	; 5
 23e:	01 c0       	rjmp	.+2      	; 0x242 <main+0x86>
			SetTrackNumber(--trackNum);
			if (trackNum<1)
			{
				SetTrackNumber(9999);
			}
			abStatus=0;
 240:	91 2f       	mov	r25, r17
	unsigned char abStatus=0;
	sei();
    while (1) 
    {
		//countup
		if ((PIND & 0x0C) == 0x08 && abStatus==0)
 242:	89 b1       	in	r24, 0x09	; 9
 244:	8c 70       	andi	r24, 0x0C	; 12
 246:	88 30       	cpi	r24, 0x08	; 8
 248:	19 f4       	brne	.+6      	; 0x250 <main+0x94>
 24a:	91 11       	cpse	r25, r1
 24c:	01 c0       	rjmp	.+2      	; 0x250 <main+0x94>
		{
			abStatus=1;
 24e:	9c 2f       	mov	r25, r28
		}
		if (((PIND & 0x0C) == 0x00) && abStatus==1)
 250:	89 b1       	in	r24, 0x09	; 9
 252:	8c 70       	andi	r24, 0x0C	; 12
 254:	19 f4       	brne	.+6      	; 0x25c <main+0xa0>
 256:	91 30       	cpi	r25, 0x01	; 1
 258:	09 f4       	brne	.+2      	; 0x25c <main+0xa0>
 25a:	63 c0       	rjmp	.+198    	; 0x322 <main+0x166>
		{
			abStatus=2;
		}
		if (((PIND & 0x0C) == 0x04) && abStatus==2)
 25c:	89 b1       	in	r24, 0x09	; 9
 25e:	8c 70       	andi	r24, 0x0C	; 12
 260:	84 30       	cpi	r24, 0x04	; 4
 262:	19 f4       	brne	.+6      	; 0x26a <main+0xae>
 264:	92 30       	cpi	r25, 0x02	; 2
 266:	09 f4       	brne	.+2      	; 0x26a <main+0xae>
 268:	51 c0       	rjmp	.+162    	; 0x30c <main+0x150>
		{
			abStatus=3;
		}
		if (((PIND & 0x0C) == 0x0C) && abStatus==3)
 26a:	89 b1       	in	r24, 0x09	; 9
 26c:	8c 70       	andi	r24, 0x0C	; 12
 26e:	8c 30       	cpi	r24, 0x0C	; 12
 270:	d9 f4       	brne	.+54     	; 0x2a8 <main+0xec>
 272:	93 30       	cpi	r25, 0x03	; 3
 274:	c9 f4       	brne	.+50     	; 0x2a8 <main+0xec>
		{
			SetTrackNumber(++trackNum);
 276:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 27a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 27e:	01 96       	adiw	r24, 0x01	; 1
 280:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 284:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 288:	0e 94 97 00 	call	0x12e	; 0x12e <SetTrackNumber>
			if (trackNum>9999)
 28c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 290:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 294:	80 31       	cpi	r24, 0x10	; 16
 296:	97 42       	sbci	r25, 0x27	; 39
 298:	30 f0       	brcs	.+12     	; 0x2a6 <main+0xea>
			{
				SetTrackNumber(1);
 29a:	81 e0       	ldi	r24, 0x01	; 1
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	0e 94 97 00 	call	0x12e	; 0x12e <SetTrackNumber>
			}		
			abStatus=0;
 2a2:	91 2f       	mov	r25, r17
 2a4:	01 c0       	rjmp	.+2      	; 0x2a8 <main+0xec>
 2a6:	91 2f       	mov	r25, r17
		}
		//countdown
		if ((PIND & 0x0C) == 0x04 && abStatus==0)
 2a8:	89 b1       	in	r24, 0x09	; 9
 2aa:	8c 70       	andi	r24, 0x0C	; 12
 2ac:	84 30       	cpi	r24, 0x04	; 4
 2ae:	19 f4       	brne	.+6      	; 0x2b6 <main+0xfa>
 2b0:	91 11       	cpse	r25, r1
 2b2:	01 c0       	rjmp	.+2      	; 0x2b6 <main+0xfa>
		{
			abStatus=4;
 2b4:	9d 2f       	mov	r25, r29
		}
		if (((PIND & 0x0C) == 0x00) && abStatus==4)
 2b6:	89 b1       	in	r24, 0x09	; 9
 2b8:	8c 70       	andi	r24, 0x0C	; 12
 2ba:	11 f4       	brne	.+4      	; 0x2c0 <main+0x104>
 2bc:	94 30       	cpi	r25, 0x04	; 4
 2be:	d1 f1       	breq	.+116    	; 0x334 <main+0x178>
		{
			abStatus=5;
		}
		if (((PIND & 0x0C) == 0x08) && abStatus==5)
 2c0:	89 b1       	in	r24, 0x09	; 9
 2c2:	8c 70       	andi	r24, 0x0C	; 12
 2c4:	88 30       	cpi	r24, 0x08	; 8
 2c6:	11 f4       	brne	.+4      	; 0x2cc <main+0x110>
 2c8:	95 30       	cpi	r25, 0x05	; 5
 2ca:	29 f1       	breq	.+74     	; 0x316 <main+0x15a>
		{
			abStatus=6;
		}
		if (((PIND & 0x0C) == 0x0C) && abStatus==6)
 2cc:	89 b1       	in	r24, 0x09	; 9
 2ce:	8c 70       	andi	r24, 0x0C	; 12
 2d0:	8c 30       	cpi	r24, 0x0C	; 12
 2d2:	09 f0       	breq	.+2      	; 0x2d6 <main+0x11a>
 2d4:	b6 cf       	rjmp	.-148    	; 0x242 <main+0x86>
 2d6:	96 30       	cpi	r25, 0x06	; 6
 2d8:	09 f0       	breq	.+2      	; 0x2dc <main+0x120>
 2da:	b3 cf       	rjmp	.-154    	; 0x242 <main+0x86>
		{
			SetTrackNumber(--trackNum);
 2dc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 2e0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 2e4:	01 97       	sbiw	r24, 0x01	; 1
 2e6:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 2ea:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 2ee:	0e 94 97 00 	call	0x12e	; 0x12e <SetTrackNumber>
			if (trackNum<1)
 2f2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 2f6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 2fa:	89 2b       	or	r24, r25
 2fc:	09 f0       	breq	.+2      	; 0x300 <main+0x144>
 2fe:	a0 cf       	rjmp	.-192    	; 0x240 <main+0x84>
			{
				SetTrackNumber(9999);
 300:	8f e0       	ldi	r24, 0x0F	; 15
 302:	97 e2       	ldi	r25, 0x27	; 39
 304:	0e 94 97 00 	call	0x12e	; 0x12e <SetTrackNumber>
			}
			abStatus=0;
 308:	91 2f       	mov	r25, r17
 30a:	9b cf       	rjmp	.-202    	; 0x242 <main+0x86>
		}
		if (((PIND & 0x0C) == 0x04) && abStatus==2)
		{
			abStatus=3;
		}
		if (((PIND & 0x0C) == 0x0C) && abStatus==3)
 30c:	89 b1       	in	r24, 0x09	; 9
 30e:	8c 70       	andi	r24, 0x0C	; 12
 310:	8c 30       	cpi	r24, 0x0C	; 12
 312:	69 f4       	brne	.+26     	; 0x32e <main+0x172>
 314:	b0 cf       	rjmp	.-160    	; 0x276 <main+0xba>
		}
		if (((PIND & 0x0C) == 0x08) && abStatus==5)
		{
			abStatus=6;
		}
		if (((PIND & 0x0C) == 0x0C) && abStatus==6)
 316:	89 b1       	in	r24, 0x09	; 9
 318:	8c 70       	andi	r24, 0x0C	; 12
 31a:	8c 30       	cpi	r24, 0x0C	; 12
 31c:	f9 f2       	breq	.-66     	; 0x2dc <main+0x120>
		{
			abStatus=5;
		}
		if (((PIND & 0x0C) == 0x08) && abStatus==5)
		{
			abStatus=6;
 31e:	9e 2d       	mov	r25, r14
 320:	90 cf       	rjmp	.-224    	; 0x242 <main+0x86>
		}
		if (((PIND & 0x0C) == 0x00) && abStatus==1)
		{
			abStatus=2;
		}
		if (((PIND & 0x0C) == 0x04) && abStatus==2)
 322:	89 b1       	in	r24, 0x09	; 9
 324:	8c 70       	andi	r24, 0x0C	; 12
 326:	84 30       	cpi	r24, 0x04	; 4
 328:	89 f3       	breq	.-30     	; 0x30c <main+0x150>
		{
			abStatus=1;
		}
		if (((PIND & 0x0C) == 0x00) && abStatus==1)
		{
			abStatus=2;
 32a:	9f 2d       	mov	r25, r15
 32c:	9e cf       	rjmp	.-196    	; 0x26a <main+0xae>
				SetTrackNumber(1);
			}		
			abStatus=0;
		}
		//countdown
		if ((PIND & 0x0C) == 0x04 && abStatus==0)
 32e:	89 b1       	in	r24, 0x09	; 9
		{
			abStatus=2;
		}
		if (((PIND & 0x0C) == 0x04) && abStatus==2)
		{
			abStatus=3;
 330:	9d 2d       	mov	r25, r13
 332:	c1 cf       	rjmp	.-126    	; 0x2b6 <main+0xfa>
		}
		if (((PIND & 0x0C) == 0x00) && abStatus==4)
		{
			abStatus=5;
		}
		if (((PIND & 0x0C) == 0x08) && abStatus==5)
 334:	89 b1       	in	r24, 0x09	; 9
 336:	8c 70       	andi	r24, 0x0C	; 12
 338:	88 30       	cpi	r24, 0x08	; 8
 33a:	69 f3       	breq	.-38     	; 0x316 <main+0x15a>
		{
			abStatus=4;
		}
		if (((PIND & 0x0C) == 0x00) && abStatus==4)
		{
			abStatus=5;
 33c:	90 2f       	mov	r25, r16
 33e:	c6 cf       	rjmp	.-116    	; 0x2cc <main+0x110>

00000340 <__vector_7>:
}



ISR(TIMER2_COMPA_vect)
{
 340:	1f 92       	push	r1
 342:	0f 92       	push	r0
 344:	0f b6       	in	r0, 0x3f	; 63
 346:	0f 92       	push	r0
 348:	11 24       	eor	r1, r1
 34a:	2f 93       	push	r18
 34c:	3f 93       	push	r19
 34e:	4f 93       	push	r20
 350:	5f 93       	push	r21
 352:	6f 93       	push	r22
 354:	7f 93       	push	r23
 356:	8f 93       	push	r24
 358:	9f 93       	push	r25
 35a:	af 93       	push	r26
 35c:	bf 93       	push	r27
 35e:	ef 93       	push	r30
 360:	ff 93       	push	r31
	static unsigned char digit=0;
	//全部クリア
	cbi(PORTD,PD7);
 362:	5f 98       	cbi	0x0b, 7	; 11
	cbi(PORTB,PB7);
 364:	2f 98       	cbi	0x05, 7	; 5
	cbi(PORTB,PB6);
 366:	2e 98       	cbi	0x05, 6	; 5
	cbi(PORTD,PD4);
 368:	5c 98       	cbi	0x0b, 4	; 11
	//特定桁の表示
	switch (digit)
 36a:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <digit.1753>
 36e:	81 30       	cpi	r24, 0x01	; 1
 370:	99 f0       	breq	.+38     	; 0x398 <__vector_7+0x58>
 372:	28 f0       	brcs	.+10     	; 0x37e <__vector_7+0x3e>
 374:	82 30       	cpi	r24, 0x02	; 2
 376:	e9 f0       	breq	.+58     	; 0x3b2 <__vector_7+0x72>
 378:	83 30       	cpi	r24, 0x03	; 3
 37a:	41 f1       	breq	.+80     	; 0x3cc <__vector_7+0x8c>
 37c:	33 c0       	rjmp	.+102    	; 0x3e4 <__vector_7+0xa4>
	{
		case 0:
		PORTC|=0b00111110;
 37e:	88 b1       	in	r24, 0x08	; 8
 380:	8e 63       	ori	r24, 0x3E	; 62
 382:	88 b9       	out	0x08, r24	; 8
		PORTB|=0b00001101;
 384:	85 b1       	in	r24, 0x05	; 5
 386:	8d 60       	ori	r24, 0x0D	; 13
 388:	85 b9       	out	0x05, r24	; 5
		sbi(PORTD,PD7);
 38a:	5f 9a       	sbi	0x0b, 7	; 11
		Set7Seg(trackDigit[0],0);
 38c:	60 e0       	ldi	r22, 0x00	; 0
 38e:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <trackDigit>
 392:	0e 94 53 00 	call	0xa6	; 0xa6 <Set7Seg>
		break;
 396:	26 c0       	rjmp	.+76     	; 0x3e4 <__vector_7+0xa4>
		case 1:
		PORTC|=0b00111110;
 398:	88 b1       	in	r24, 0x08	; 8
 39a:	8e 63       	ori	r24, 0x3E	; 62
 39c:	88 b9       	out	0x08, r24	; 8
		PORTB|=0b00001101;		
 39e:	85 b1       	in	r24, 0x05	; 5
 3a0:	8d 60       	ori	r24, 0x0D	; 13
 3a2:	85 b9       	out	0x05, r24	; 5
		sbi(PORTB,PB7);
 3a4:	2f 9a       	sbi	0x05, 7	; 5
		Set7Seg(trackDigit[1],0);
 3a6:	60 e0       	ldi	r22, 0x00	; 0
 3a8:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <trackDigit+0x1>
 3ac:	0e 94 53 00 	call	0xa6	; 0xa6 <Set7Seg>
		break;
 3b0:	19 c0       	rjmp	.+50     	; 0x3e4 <__vector_7+0xa4>
		case 2:
		PORTC|=0b00111110;
 3b2:	88 b1       	in	r24, 0x08	; 8
 3b4:	8e 63       	ori	r24, 0x3E	; 62
 3b6:	88 b9       	out	0x08, r24	; 8
		PORTB|=0b00001101;		
 3b8:	85 b1       	in	r24, 0x05	; 5
 3ba:	8d 60       	ori	r24, 0x0D	; 13
 3bc:	85 b9       	out	0x05, r24	; 5
		sbi(PORTB,PB6);
 3be:	2e 9a       	sbi	0x05, 6	; 5
		Set7Seg(trackDigit[2],0);
 3c0:	60 e0       	ldi	r22, 0x00	; 0
 3c2:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <trackDigit+0x2>
 3c6:	0e 94 53 00 	call	0xa6	; 0xa6 <Set7Seg>
		break;
 3ca:	0c c0       	rjmp	.+24     	; 0x3e4 <__vector_7+0xa4>
		case 3:
		PORTC|=0b00111110;
 3cc:	88 b1       	in	r24, 0x08	; 8
 3ce:	8e 63       	ori	r24, 0x3E	; 62
 3d0:	88 b9       	out	0x08, r24	; 8
		PORTB|=0b00001101;		
 3d2:	85 b1       	in	r24, 0x05	; 5
 3d4:	8d 60       	ori	r24, 0x0D	; 13
 3d6:	85 b9       	out	0x05, r24	; 5
		sbi(PORTD,PD4);
 3d8:	5c 9a       	sbi	0x0b, 4	; 11
		Set7Seg(trackDigit[3],0);
 3da:	60 e0       	ldi	r22, 0x00	; 0
 3dc:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <trackDigit+0x3>
 3e0:	0e 94 53 00 	call	0xa6	; 0xa6 <Set7Seg>
		break;
		default:
		/* Your code here */
		break;
	}
	roopup(digit,0,3);
 3e4:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <digit.1753>
 3e8:	83 30       	cpi	r24, 0x03	; 3
 3ea:	10 f4       	brcc	.+4      	; 0x3f0 <__vector_7+0xb0>
 3ec:	8f 5f       	subi	r24, 0xFF	; 255
 3ee:	01 c0       	rjmp	.+2      	; 0x3f2 <__vector_7+0xb2>
 3f0:	80 e0       	ldi	r24, 0x00	; 0
 3f2:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <digit.1753>
	
	//ゲーミングロータリーエンコーダ
	static unsigned char stage=0;
	if (stage==0)
 3f6:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 3fa:	81 11       	cpse	r24, r1
 3fc:	19 c0       	rjmp	.+50     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
	{
		OCR0B--;
 3fe:	88 b5       	in	r24, 0x28	; 40
 400:	81 50       	subi	r24, 0x01	; 1
 402:	88 bd       	out	0x28, r24	; 40
		OCR1A++;
 404:	e8 e8       	ldi	r30, 0x88	; 136
 406:	f0 e0       	ldi	r31, 0x00	; 0
 408:	80 81       	ld	r24, Z
 40a:	91 81       	ldd	r25, Z+1	; 0x01
 40c:	01 96       	adiw	r24, 0x01	; 1
 40e:	91 83       	std	Z+1, r25	; 0x01
 410:	80 83       	st	Z, r24
		if (OCR0B==0) 
 412:	88 b5       	in	r24, 0x28	; 40
 414:	81 11       	cpse	r24, r1
 416:	3b c0       	rjmp	.+118    	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
		{
			OCR0A=0;
 418:	17 bc       	out	0x27, r1	; 39
			OCR0B=0;
 41a:	18 bc       	out	0x28, r1	; 40
			OCR1A=255;			
 41c:	8f ef       	ldi	r24, 0xFF	; 255
 41e:	90 e0       	ldi	r25, 0x00	; 0
 420:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 424:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
			stage=1;			
 428:	81 e0       	ldi	r24, 0x01	; 1
 42a:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
 42e:	2f c0       	rjmp	.+94     	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
		}
	}
	else if (stage==1)
 430:	81 30       	cpi	r24, 0x01	; 1
 432:	c9 f4       	brne	.+50     	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
	{
		OCR1A--;
 434:	e8 e8       	ldi	r30, 0x88	; 136
 436:	f0 e0       	ldi	r31, 0x00	; 0
 438:	80 81       	ld	r24, Z
 43a:	91 81       	ldd	r25, Z+1	; 0x01
 43c:	01 97       	sbiw	r24, 0x01	; 1
 43e:	91 83       	std	Z+1, r25	; 0x01
 440:	80 83       	st	Z, r24
		OCR0A++;
 442:	87 b5       	in	r24, 0x27	; 39
 444:	8f 5f       	subi	r24, 0xFF	; 255
 446:	87 bd       	out	0x27, r24	; 39
		if (OCR1A==0) 
 448:	80 81       	ld	r24, Z
 44a:	91 81       	ldd	r25, Z+1	; 0x01
 44c:	89 2b       	or	r24, r25
 44e:	f9 f4       	brne	.+62     	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
		{
			OCR0A=255;
 450:	8f ef       	ldi	r24, 0xFF	; 255
 452:	87 bd       	out	0x27, r24	; 39
			OCR0B=0;
 454:	18 bc       	out	0x28, r1	; 40
			OCR1A=0;
 456:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 45a:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
			stage=2;
 45e:	82 e0       	ldi	r24, 0x02	; 2
 460:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
 464:	14 c0       	rjmp	.+40     	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
		}
	}
	else if (stage==2)
 466:	82 30       	cpi	r24, 0x02	; 2
 468:	91 f4       	brne	.+36     	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
	{
		OCR0A--;
 46a:	87 b5       	in	r24, 0x27	; 39
 46c:	81 50       	subi	r24, 0x01	; 1
 46e:	87 bd       	out	0x27, r24	; 39
		OCR0B++;
 470:	88 b5       	in	r24, 0x28	; 40
 472:	8f 5f       	subi	r24, 0xFF	; 255
 474:	88 bd       	out	0x28, r24	; 40
		if (OCR0A==0) 
 476:	87 b5       	in	r24, 0x27	; 39
 478:	81 11       	cpse	r24, r1
 47a:	09 c0       	rjmp	.+18     	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
		{
			OCR0A=0;
 47c:	17 bc       	out	0x27, r1	; 39
			OCR0B=255;
 47e:	8f ef       	ldi	r24, 0xFF	; 255
 480:	88 bd       	out	0x28, r24	; 40
			OCR1A=0;
 482:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 486:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
			stage=0;
 48a:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <__data_end>
		}
	}
}
 48e:	ff 91       	pop	r31
 490:	ef 91       	pop	r30
 492:	bf 91       	pop	r27
 494:	af 91       	pop	r26
 496:	9f 91       	pop	r25
 498:	8f 91       	pop	r24
 49a:	7f 91       	pop	r23
 49c:	6f 91       	pop	r22
 49e:	5f 91       	pop	r21
 4a0:	4f 91       	pop	r20
 4a2:	3f 91       	pop	r19
 4a4:	2f 91       	pop	r18
 4a6:	0f 90       	pop	r0
 4a8:	0f be       	out	0x3f, r0	; 63
 4aa:	0f 90       	pop	r0
 4ac:	1f 90       	pop	r1
 4ae:	18 95       	reti

000004b0 <__umulhisi3>:
 4b0:	a2 9f       	mul	r26, r18
 4b2:	b0 01       	movw	r22, r0
 4b4:	b3 9f       	mul	r27, r19
 4b6:	c0 01       	movw	r24, r0
 4b8:	a3 9f       	mul	r26, r19
 4ba:	70 0d       	add	r23, r0
 4bc:	81 1d       	adc	r24, r1
 4be:	11 24       	eor	r1, r1
 4c0:	91 1d       	adc	r25, r1
 4c2:	b2 9f       	mul	r27, r18
 4c4:	70 0d       	add	r23, r0
 4c6:	81 1d       	adc	r24, r1
 4c8:	11 24       	eor	r1, r1
 4ca:	91 1d       	adc	r25, r1
 4cc:	08 95       	ret

000004ce <_exit>:
 4ce:	f8 94       	cli

000004d0 <__stop_program>:
 4d0:	ff cf       	rjmp	.-2      	; 0x4d0 <__stop_program>
