
SeisoMachine2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000027e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000020a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  0000027e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000027e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  000002f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000725  00000000  00000000  00000330  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000662  00000000  00000000  00000a55  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000039a  00000000  00000000  000010b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000009c  00000000  00000000  00001454  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000038f  00000000  00000000  000014f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000c1  00000000  00000000  0000187f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001940  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__vector_1>
   8:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__vector_2>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__vector_7>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 03 01 	jmp	0x206	; 0x206 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:
    {
    }
}

void Set7Seg(unsigned char num,unsigned char dot)
{
  90:	8f ec       	ldi	r24, 0xCF	; 207
  92:	84 b9       	out	0x04, r24	; 4
  94:	8e e3       	ldi	r24, 0x3E	; 62
  96:	87 b9       	out	0x07, r24	; 7
  98:	80 ef       	ldi	r24, 0xF0	; 240
  9a:	8a b9       	out	0x0a, r24	; 10
  9c:	5f 9a       	sbi	0x0b, 7	; 11
  9e:	83 ef       	ldi	r24, 0xF3	; 243
  a0:	84 bd       	out	0x24, r24	; 36
  a2:	84 e0       	ldi	r24, 0x04	; 4
  a4:	85 bd       	out	0x25, r24	; 37
  a6:	91 ec       	ldi	r25, 0xC1	; 193
  a8:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
  ac:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
  b0:	92 e0       	ldi	r25, 0x02	; 2
  b2:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
  b6:	8f e0       	ldi	r24, 0x0F	; 15
  b8:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
  bc:	88 e2       	ldi	r24, 0x28	; 40
  be:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
  c2:	8f ef       	ldi	r24, 0xFF	; 255
  c4:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>
  c8:	90 93 70 00 	sts	0x0070, r25	; 0x800070 <__DATA_REGION_ORIGIN__+0x10>
  cc:	95 e0       	ldi	r25, 0x05	; 5
  ce:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
  d2:	93 e0       	ldi	r25, 0x03	; 3
  d4:	9d bb       	out	0x1d, r25	; 29
  d6:	17 bc       	out	0x27, r1	; 39
  d8:	88 bd       	out	0x28, r24	; 40
  da:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
  de:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
  e2:	78 94       	sei
  e4:	ff cf       	rjmp	.-2      	; 0xe4 <main+0x54>

000000e6 <__vector_7>:

}

ISR(TIMER2_COMPA_vect)
{
  e6:	1f 92       	push	r1
  e8:	0f 92       	push	r0
  ea:	0f b6       	in	r0, 0x3f	; 63
  ec:	0f 92       	push	r0
  ee:	11 24       	eor	r1, r1
  f0:	8f 93       	push	r24
  f2:	9f 93       	push	r25
  f4:	ef 93       	push	r30
  f6:	ff 93       	push	r31
	static unsigned char digit=0;
	//全部クリア
	cbi(PORTD,PD7);
  f8:	5f 98       	cbi	0x0b, 7	; 11
	cbi(PORTB,PB7);
  fa:	2f 98       	cbi	0x05, 7	; 5
	cbi(PORTB,PB6);
  fc:	2e 98       	cbi	0x05, 6	; 5
	cbi(PORTD,PD4);
  fe:	5c 98       	cbi	0x0b, 4	; 11
	//特定桁の表示
	switch (digit)
 100:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <digit.1744>
 104:	81 30       	cpi	r24, 0x01	; 1
 106:	41 f0       	breq	.+16     	; 0x118 <__vector_7+0x32>
 108:	28 f0       	brcs	.+10     	; 0x114 <__vector_7+0x2e>
 10a:	82 30       	cpi	r24, 0x02	; 2
 10c:	39 f0       	breq	.+14     	; 0x11c <__vector_7+0x36>
 10e:	83 30       	cpi	r24, 0x03	; 3
 110:	39 f0       	breq	.+14     	; 0x120 <__vector_7+0x3a>
 112:	07 c0       	rjmp	.+14     	; 0x122 <__vector_7+0x3c>
	{
		case 0:
		sbi(PORTD,PD7);
 114:	5f 9a       	sbi	0x0b, 7	; 11
		break;
 116:	05 c0       	rjmp	.+10     	; 0x122 <__vector_7+0x3c>
		case 1:
		sbi(PORTB,PB7);
 118:	2f 9a       	sbi	0x05, 7	; 5
		break;
 11a:	03 c0       	rjmp	.+6      	; 0x122 <__vector_7+0x3c>
		case 2:
		sbi(PORTB,PB6);
 11c:	2e 9a       	sbi	0x05, 6	; 5
		break;
 11e:	01 c0       	rjmp	.+2      	; 0x122 <__vector_7+0x3c>
		case 3:
		sbi(PORTD,PD4);
 120:	5c 9a       	sbi	0x0b, 4	; 11
		break;
		default:
		/* Your code here */
		break;
	}
	roopup(digit,0,3);
 122:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <digit.1744>
 126:	83 30       	cpi	r24, 0x03	; 3
 128:	10 f4       	brcc	.+4      	; 0x12e <__vector_7+0x48>
 12a:	8f 5f       	subi	r24, 0xFF	; 255
 12c:	01 c0       	rjmp	.+2      	; 0x130 <__vector_7+0x4a>
 12e:	80 e0       	ldi	r24, 0x00	; 0
 130:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <digit.1744>
	
	//ゲーミングロータリーエンコーダ
	static unsigned char stage=0;
	if (stage==0)
 134:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 138:	81 11       	cpse	r24, r1
 13a:	19 c0       	rjmp	.+50     	; 0x16e <__vector_7+0x88>
	{
		OCR0B--;
 13c:	88 b5       	in	r24, 0x28	; 40
 13e:	81 50       	subi	r24, 0x01	; 1
 140:	88 bd       	out	0x28, r24	; 40
		OCR1A++;
 142:	e8 e8       	ldi	r30, 0x88	; 136
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	80 81       	ld	r24, Z
 148:	91 81       	ldd	r25, Z+1	; 0x01
 14a:	01 96       	adiw	r24, 0x01	; 1
 14c:	91 83       	std	Z+1, r25	; 0x01
 14e:	80 83       	st	Z, r24
		if (OCR0B==0) 
 150:	88 b5       	in	r24, 0x28	; 40
 152:	81 11       	cpse	r24, r1
 154:	3b c0       	rjmp	.+118    	; 0x1cc <__vector_7+0xe6>
		{
			OCR0A=0;
 156:	17 bc       	out	0x27, r1	; 39
			OCR0B=0;
 158:	18 bc       	out	0x28, r1	; 40
			OCR1A=255;			
 15a:	8f ef       	ldi	r24, 0xFF	; 255
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 162:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
			stage=1;			
 166:	81 e0       	ldi	r24, 0x01	; 1
 168:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 16c:	2f c0       	rjmp	.+94     	; 0x1cc <__vector_7+0xe6>
		}
	}
	else if (stage==1)
 16e:	81 30       	cpi	r24, 0x01	; 1
 170:	c9 f4       	brne	.+50     	; 0x1a4 <__vector_7+0xbe>
	{
		OCR1A--;
 172:	e8 e8       	ldi	r30, 0x88	; 136
 174:	f0 e0       	ldi	r31, 0x00	; 0
 176:	80 81       	ld	r24, Z
 178:	91 81       	ldd	r25, Z+1	; 0x01
 17a:	01 97       	sbiw	r24, 0x01	; 1
 17c:	91 83       	std	Z+1, r25	; 0x01
 17e:	80 83       	st	Z, r24
		OCR0A++;
 180:	87 b5       	in	r24, 0x27	; 39
 182:	8f 5f       	subi	r24, 0xFF	; 255
 184:	87 bd       	out	0x27, r24	; 39
		if (OCR1A==0) 
 186:	80 81       	ld	r24, Z
 188:	91 81       	ldd	r25, Z+1	; 0x01
 18a:	89 2b       	or	r24, r25
 18c:	f9 f4       	brne	.+62     	; 0x1cc <__vector_7+0xe6>
		{
			OCR0A=255;
 18e:	8f ef       	ldi	r24, 0xFF	; 255
 190:	87 bd       	out	0x27, r24	; 39
			OCR0B=0;
 192:	18 bc       	out	0x28, r1	; 40
			OCR1A=0;
 194:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 198:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
			stage=2;
 19c:	82 e0       	ldi	r24, 0x02	; 2
 19e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 1a2:	14 c0       	rjmp	.+40     	; 0x1cc <__vector_7+0xe6>
		}
	}
	else if (stage==2)
 1a4:	82 30       	cpi	r24, 0x02	; 2
 1a6:	91 f4       	brne	.+36     	; 0x1cc <__vector_7+0xe6>
	{
		OCR0A--;
 1a8:	87 b5       	in	r24, 0x27	; 39
 1aa:	81 50       	subi	r24, 0x01	; 1
 1ac:	87 bd       	out	0x27, r24	; 39
		OCR0B++;
 1ae:	88 b5       	in	r24, 0x28	; 40
 1b0:	8f 5f       	subi	r24, 0xFF	; 255
 1b2:	88 bd       	out	0x28, r24	; 40
		if (OCR0A==0) 
 1b4:	87 b5       	in	r24, 0x27	; 39
 1b6:	81 11       	cpse	r24, r1
 1b8:	09 c0       	rjmp	.+18     	; 0x1cc <__vector_7+0xe6>
		{
			OCR0A=0;
 1ba:	17 bc       	out	0x27, r1	; 39
			OCR0B=255;
 1bc:	8f ef       	ldi	r24, 0xFF	; 255
 1be:	88 bd       	out	0x28, r24	; 40
			OCR1A=0;
 1c0:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 1c4:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
			stage=0;
 1c8:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
		}
	}
}
 1cc:	ff 91       	pop	r31
 1ce:	ef 91       	pop	r30
 1d0:	9f 91       	pop	r25
 1d2:	8f 91       	pop	r24
 1d4:	0f 90       	pop	r0
 1d6:	0f be       	out	0x3f, r0	; 63
 1d8:	0f 90       	pop	r0
 1da:	1f 90       	pop	r1
 1dc:	18 95       	reti

000001de <__vector_1>:

ISR(INT0_vect)
{
 1de:	1f 92       	push	r1
 1e0:	0f 92       	push	r0
 1e2:	0f b6       	in	r0, 0x3f	; 63
 1e4:	0f 92       	push	r0
 1e6:	11 24       	eor	r1, r1
	
}
 1e8:	0f 90       	pop	r0
 1ea:	0f be       	out	0x3f, r0	; 63
 1ec:	0f 90       	pop	r0
 1ee:	1f 90       	pop	r1
 1f0:	18 95       	reti

000001f2 <__vector_2>:

ISR(INT1_vect)
{
 1f2:	1f 92       	push	r1
 1f4:	0f 92       	push	r0
 1f6:	0f b6       	in	r0, 0x3f	; 63
 1f8:	0f 92       	push	r0
 1fa:	11 24       	eor	r1, r1
	
 1fc:	0f 90       	pop	r0
 1fe:	0f be       	out	0x3f, r0	; 63
 200:	0f 90       	pop	r0
 202:	1f 90       	pop	r1
 204:	18 95       	reti

00000206 <_exit>:
 206:	f8 94       	cli

00000208 <__stop_program>:
 208:	ff cf       	rjmp	.-2      	; 0x208 <__stop_program>
